{"modules":[],"tables":[{"Name":"用户表","ClassName":"User","Restful":"User","columns":{"id":{"name":"自增ID","nullable":true,"unique":true,"dataType":"IncrementId","sort":0},"created_at":{"name":"创建时间","nullable":true,"unique":false,"dataType":"CreatedTime","sort":7},"updated_at":{"name":"更新时间","nullable":true,"unique":false,"dataType":"UpdatedTime","sort":8},"name":{"nullable":true,"unique":false,"splitExtension":false,"name":"用户名","dataType":"string","extension":{},"sort":1},"age":{"nullable":false,"unique":false,"splitExtension":false,"name":"年龄","dataType":"number","extension":{"default":0},"sort":2},"active":{"nullable":true,"unique":false,"splitExtension":false,"name":"活跃","dataType":"boolean","extension":{},"sort":3},"birth":{"nullable":true,"unique":false,"splitExtension":false,"dataType":"Date","extension":{"dbType":"date"},"name":"生日","sort":4},"config":{"nullable":false,"unique":false,"splitExtension":false,"dataType":"Json","extension":{"dbType":"json","type_string":"UserConfig","need_import":true,"type_import":[{"type":"generator","default":false,"from":"User.Constants","value":"UserConfig"}]},"name":"配置","sort":5},"posts":{"nullable":false,"unique":false,"splitExtension":false,"dataType":"RelationOneToMany","extension":{"type_string":"Post[]","need_import":true,"type_import":[{"type":"generator","default":false,"from":"Post","value":"Post"}],"relation_in_generator":true,"relation_entity":"Post","relation_entity_key":"auth"},"name":"文章列表","sort":6}},"Constants":"export interface UserConfig{\n    a: string;\n}\n\nexport enum TestEnum{\n    a = \"a\"\n}"},{"Name":"文章表","ClassName":"Post","Restful":"Post","columns":{"id":{"name":"自增ID","nullable":true,"unique":true,"dataType":"IncrementId","sort":0},"created_at":{"name":"创建时间","nullable":true,"unique":false,"dataType":"CreatedTime","sort":1},"updated_at":{"name":"更新时间","nullable":true,"unique":false,"dataType":"UpdatedTime","sort":2},"auth":{"nullable":false,"unique":false,"splitExtension":false,"name":"作者","dataType":"number","extension":{},"sort":3}}}],"templates":{"CurdServices":"import {Brackets, DeepPartial, ObjectLiteral, Repository, SelectQueryBuilder, WhereExpressionBuilder} from \"typeorm\";\nimport {\n    FindAllBody,\n    FindAllResponse, FindOneQuery,\n    FindWhereBrackets,\n    FindWhereInterface,\n    FindWhereType, SearchBody\n} from \"./RequestConstant\";\nimport {HttpException} from \"@nestjs/common\";\n\nexport class CurdService<T extends ObjectLiteral = any> {\n    private _repository: Repository<T>;\n    protected primary_key: keyof T = \"id\";\n\n\n    protected constructor(_repository: any) {\n        this._repository = _repository;\n    }\n\n\n    /** 查询列表 */\n    async CURD_FindAll(body: FindAllBody): Promise<FindAllResponse<T>> {\n        const qb = this._repository.createQueryBuilder(\"entity\");\n        CurdService.QbSearch(qb, body);\n        if (body.not_page) return qb.getMany();\n        const {pageSize = 10, page = 1,} = body;\n        // 添加分页\n        qb.skip((page - 1) * pageSize).take(pageSize)\n        const [result, total] = await qb.getManyAndCount();\n        return {\n            data: result,\n            pagination: {\n                page: page,\n                pageSize: pageSize,\n                total,\n            },\n        };\n    }\n\n    /** 搜索一个 */\n    async CURD_SearchOne(body: SearchBody): Promise<T | null> {\n        body = body || {};\n        const qb = this._repository.createQueryBuilder(\"entity\");\n        CurdService.QbSearch(qb, body);\n        return qb.getOne();\n    }\n\n\n    /** 获取一个的详情 */\n    async CURD_FindOne(id: string | number, opt?: FindOneQuery): Promise<T | null> {\n        opt = opt || {}\n        const qb = this._repository.createQueryBuilder(\"entity\");\n        // 处理选择字段\n        CurdService.QbAddSelect(qb, opt.select);\n        // 处理关系筛选\n        CurdService.QbAddRelations(qb, opt.relations, opt.relationSelect)\n        qb.where(\"entity.id = :id\", {id})\n        return qb.getOne();\n    }\n\n    /** 获取一个的详情 */\n    async CURD_FindOneOrFail(id: string | number, opt?: FindOneQuery): Promise<T> {\n        const entity = await this.CURD_FindOne(id, opt);\n        if (!entity) throw new HttpException(\"没有找到该数据\", 404)\n        return entity;\n    }\n\n    /** 创建 */\n    async CURD_Create(createPostDto: DeepPartial<T>): Promise<T> {\n        const newEntity = this._repository.create(createPostDto);\n        return this._repository.save(newEntity);\n    }\n\n    /** 更新 */\n    async CURD_Update(id: string, updatePostDto: DeepPartial<T>): Promise<T> {\n        const entity = await this.CURD_FindOneOrFail(id);\n        Object.assign(entity, updatePostDto); // 更新实体的属性\n        return this._repository.save(entity);\n    }\n\n    /** 移除 */\n    async CURD_Remove(id: string): Promise<void> {\n        const entity = await this.CURD_FindOneOrFail(id);\n        await this._repository.remove(entity);\n    }\n\n    static QbSearch(qb: SelectQueryBuilder<any>, opt: SearchBody<any>) {\n        // 处理选择字段\n        CurdService.QbAddSelect(qb, opt.select);\n        // 处理排序\n        CurdService.QbAddOrder(qb, opt.orderBy);\n        // 处理关系筛选\n        CurdService.QbAddRelations(qb, opt.relations, opt.relationSelect)\n        // 附加where\n        CurdService.HandleQueryBuilderWhere(qb, opt);\n    }\n\n\n    static QbAddRelations(qb: SelectQueryBuilder<any>, relations?: FindAllBody[\"relations\"], relationSelect?: FindAllBody[\"relationSelect\"]) {\n        relationSelect = relationSelect || {};\n        relations = relations || [];\n\n        for (const relation of relations) {\n            if (!relationSelect[relation] || relationSelect[relation].length <= 0) {\n                qb.leftJoinAndSelect(`entity.${relation}`, relation);\n            } else {\n                qb.leftJoin(`entity.${relation}`, relation);\n                const selectList = relationSelect[relation];\n                for (const select of selectList) {\n                    qb.addSelect(`${relation}.${select}`);\n                }\n            }\n        }\n    }\n\n    static QbAddSelect(qb: SelectQueryBuilder<any>, select?: FindAllBody[\"select\"]) {\n        if (select && select.length > 0) {\n            qb.select(select.map(field => `entity.${field}`));\n        } else {\n            qb.select('entity'); // 默认选择整个实体\n        }\n    }\n\n    static QbAddOrder(qb: SelectQueryBuilder<any>, orderBy?: FindAllBody[\"orderBy\"]) {\n        if (orderBy && orderBy.length > 0) {\n            for (const {field, order} of orderBy) {\n                qb.addOrderBy(`entity.${field}`, order);\n            }\n        }\n    }\n\n\n    /** 处理 where 条件(最上层) */\n    static HandleQueryBuilderWhere(qb: SelectQueryBuilder<any>, opt: FindAllBody<any>) {\n        if (!opt.where) return null;\n        this.ProcessWhereConditions(qb, opt.where.list, opt.where.uni);\n    }\n\n    /** 生成 Brackets 嵌套 */\n    static GenerateBrackets(item: FindWhereBrackets) {\n        return new Brackets((qb) => {\n            this.ProcessWhereConditions(qb, item.list, item.uni);\n        });\n    }\n\n    /** 通用处理 WHERE 条件的逻辑 */\n    static ProcessWhereConditions(qb: SelectQueryBuilder<any> | WhereExpressionBuilder, list: Array<FindWhereBrackets | FindWhereInterface>, uni: \"and\" | \"or\") {\n        for (const listItem of list) {\n            if (\"type\" in listItem) {\n                // 处理单个 WHERE 条件\n                const {where, parameters} = this.GetWhereValue(listItem as FindWhereInterface);\n                qb[uni === \"or\" ? \"orWhere\" : \"andWhere\"](where, parameters);\n            } else {\n                // 递归子条件\n                const brackets = this.GenerateBrackets(listItem as FindWhereBrackets);\n                qb[uni === \"or\" ? \"orWhere\" : \"andWhere\"](brackets);\n            }\n        }\n    }\n\n    /** 将 where 格式化成TypeOrm的where字段需要的内容 */\n    static GetWhereValue(data: FindWhereInterface): { where: string, parameters?: ObjectLiteral } {\n        // 处理可能存在的表关联情况\n        const field = data.field.includes(\".\") ? data.field : `entity.${data.field}`;\n\n        switch (data.type) {\n            // 基本比较\n            case FindWhereType.Equal:\n                return {where: `${field} = :TheValue`, parameters: {TheValue: data.value}};\n            case FindWhereType.NotEqual:\n                return {where: `${field} <> :TheValue`, parameters: {TheValue: data.value}};\n            case FindWhereType.GreaterThan:\n                return {where: `${field} > :TheValue`, parameters: {TheValue: data.value}};\n            case FindWhereType.GreaterThanOrEqual:\n                return {where: `${field} >= :TheValue`, parameters: {TheValue: data.value}};\n            case FindWhereType.LessThan:\n                return {where: `${field} < :TheValue`, parameters: {TheValue: data.value}};\n            case FindWhereType.LessThanOrEqual:\n                return {where: `${field} <= :TheValue`, parameters: {TheValue: data.value}};\n\n            // 范围查询\n            case FindWhereType.Between:\n                if (!Array.isArray(data.value) || data.value.length !== 2) {\n                    throw new Error(\"FindWhereType.Between requires an array of two values\");\n                }\n                return {\n                    where: `${field} BETWEEN :Value1 AND :Value2`,\n                    parameters: {Value1: data.value[0], Value2: data.value[1]}\n                };\n            case FindWhereType.NotBetween:\n                if (!Array.isArray(data.value) || data.value.length !== 2) {\n                    throw new Error(\"FindWhereType.NotBetween requires an array of two values\");\n                }\n                return {\n                    where: `${field} NOT BETWEEN :Value1 AND :Value2`,\n                    parameters: {Value1: data.value[0], Value2: data.value[1]}\n                };\n\n            // 集合查询\n            case FindWhereType.In:\n                if (!Array.isArray(data.value)) {\n                    throw new Error(\"FindWhereType.In requires an array as value\");\n                }\n                return {where: `${field} IN (:...TheValue)`, parameters: {TheValue: data.value}};\n            case FindWhereType.NotIn:\n                if (!Array.isArray(data.value)) {\n                    throw new Error(\"FindWhereType.NotIn requires an array as value\");\n                }\n                return {where: `${field} NOT IN (:...TheValue)`, parameters: {TheValue: data.value}};\n\n            // 模糊匹配\n            case FindWhereType.Like:\n                return {where: `${field} LIKE :TheValue`, parameters: {TheValue: `%${data.value}%`}};\n            case FindWhereType.NotLike:\n                return {where: `${field} NOT LIKE :TheValue`, parameters: {TheValue: `%${data.value}%`}};\n            case FindWhereType.StartsWith:\n                return {where: `${field} LIKE :TheValue`, parameters: {TheValue: `${data.value}%`}};\n            case FindWhereType.EndsWith:\n                return {where: `${field} LIKE :TheValue`, parameters: {TheValue: `%${data.value}`}};\n\n            // 为空 / 非空\n            case FindWhereType.IsNull:\n                return {where: `${field} IS NULL`, parameters: {}};\n            case FindWhereType.IsNotNull:\n                return {where: `${field} IS NOT NULL`, parameters: {}};\n\n            // 复杂查询\n            case FindWhereType.Exists:\n                return {where: `EXISTS (${data.value})`, parameters: {}}; // 这里的 value 应该是一个子查询\n            case FindWhereType.NotExists:\n                return {where: `NOT EXISTS (${data.value})`, parameters: {}};\n\n            // JSON 相关（PostgreSQL 专用）\n            case FindWhereType.JsonContains:\n                return {where: `${field} @> :TheValue`, parameters: {TheValue: JSON.stringify(data.value)}};\n            case FindWhereType.JsonNotContains:\n                return {where: `NOT (${field} @> :TheValue)`, parameters: {TheValue: JSON.stringify(data.value)}};\n            case FindWhereType.JsonHasKey:\n                return {where: `${field} ? :TheValue`, parameters: {TheValue: data.value}};\n\n            // MySQL 相关\n            case FindWhereType.FindInSet:\n                return {where: `FIND_IN_SET(:TheValue, ${field})`, parameters: {TheValue: data.value}};\n\n            default:\n                return {where: \"\"};\n        }\n    }\n\n\n}","RequestConstant":"\n/** find all 使用 post 进行复杂查询 */\nexport interface FindAllBody<T = any> {\n    /** 强制不分页  */\n    not_page?: boolean;\n    /** 每页多少个 默认 10 */\n    pageSize?: number;\n    /** 当前页数 默认 1*/\n    page?: number;\n\n    /** 选择哪些字段 */\n    select?: string[];\n    /** 关系 */\n    relations?: string[];\n    /** 关系字段选择 */\n    relationSelect?: Record<string, string[]>;\n    /** 排序 */\n    orderBy?: Array<{ field: string, order: \"ASC\" | \"DESC\" }>;\n\n    /** 查询条件 */\n    where?: FindWhereBrackets;\n}\n\n/** 复杂查询需要的基础数据 */\nexport type SearchBody<T = any> = Pick<FindAllBody<T>, \"select\" | \"relations\" | \"relationSelect\" | \"orderBy\" | \"where\">;\n\n/** 使用 get 查询单个数据时的query */\nexport type FindOneQuery<T = any> = Pick<FindAllBody<T>, \"select\" | \"relations\" | \"relationSelect\">;\n\n/** 联合find的条件 */\nexport interface FindWhereBrackets {\n    list: Array<FindWhereBrackets | FindWhereInterface>;\n    uni: \"and\" | \"or\"\n}\n\n/** 单个find的条件 */\nexport interface FindWhereInterface {\n    /** 这个查询的类型 */\n    type: FindWhereType;\n    /** where的字段 */\n    field: string;\n    /** where的值 */\n    value: string | number | Array<string | number>;\n}\n\n\n/**\n * Where 查询类型枚举\n * 用于定义不同的查询条件\n */\nexport enum FindWhereType {\n    // 基本比较\n    Equal = \"Equal\",            // 等于 =\n    NotEqual = \"NotEqual\",      // 不等于 <>\n    GreaterThan = \"GreaterThan\", // 大于 >\n    GreaterThanOrEqual = \"GreaterThanOrEqual\", // 大于等于 >=\n    LessThan = \"LessThan\",       // 小于 <\n    LessThanOrEqual = \"LessThanOrEqual\", // 小于等于 <=\n\n    // 范围查询\n    Between = \"Between\",         // 在某个区间 BETWEEN X AND Y\n    NotBetween = \"NotBetween\",   // 不在某个区间 NOT BETWEEN X AND Y\n\n    // 集合查询\n    In = \"In\",                   // 在集合内 IN (X, Y, Z)\n    NotIn = \"NotIn\",             // 不在集合内 NOT IN (X, Y, Z)\n\n    // 模糊匹配\n    Like = \"Like\",               // 模糊匹配 LIKE '%xxx%'\n    NotLike = \"NotLike\",         // 反向模糊匹配 NOT LIKE '%xxx%'\n    StartsWith = \"StartsWith\",   // 以某个字符串开头 LIKE 'xxx%'\n    EndsWith = \"EndsWith\",       // 以某个字符串结尾 LIKE '%xxx'\n\n    // 为空/非空\n    IsNull = \"IsNull\",           // 为空 IS NULL\n    IsNotNull = \"IsNotNull\",     // 非空 IS NOT NULL\n\n    // 复杂查询\n    Exists = \"Exists\",           // 存在某个子查询 EXISTS (SELECT ...)\n    NotExists = \"NotExists\",     // 不存在某个子查询 NOT EXISTS (SELECT ...)\n\n    // JSON 相关（PostgreSQL）\n    JsonContains = \"JsonContains\",   // JSON 包含 @> '{ \"key\": \"value\" }'\n    JsonNotContains = \"JsonNotContains\", // JSON 不包含 NOT (column @> '{ \"key\": \"value\" }')\n    JsonHasKey = \"JsonHasKey\",       // JSON 是否包含某个键 column ? 'key'\n\n    // MySQL 相关\n    FindInSet = \"FindInSet\"      // MySQL FIND_IN_SET('value', column)\n}\n\n/** find all 使用 post 进行复杂查询结果 */\nexport type FindAllResponse<T = any> = FindAllPaginationResponse<T> | T[];\n\n/** FindAll查询的分页结果 */\nexport interface FindAllPaginationResponse<T = any> {\n    data: T[];\n    pagination?: {\n        /** 当前页码 */\n        page: number;\n        /** 每页数据条数 */\n        pageSize: number;\n        /** 总记录数（可选）*/\n        total?: number;\n    };\n}\n\n","CurdController":"import {Body, Delete, Get, HttpCode, HttpStatus, Param, Patch, Post, Put, Query} from \"@nestjs/common\";\nimport {FindAllBody, FindAllResponse, FindOneQuery, SearchBody} from \"./RequestConstant\";\nimport {CurdService} from \"./CurdService\";\nimport {DeepPartial, ObjectLiteral} from \"typeorm\";\n\nexport class CurdController<T extends ObjectLiteral = any> {\n    protected _services: CurdService<T>;\n\n    protected constructor(_services: CurdService<T>) {\n        this._services = _services;\n    }\n\n    @Post(\"PostFindAll\")\n    @HttpCode(HttpStatus.OK)\n    PostFindAll(@Body() body: FindAllBody): Promise<FindAllResponse<T>> {\n        return this._services.CURD_FindAll(body);\n    }\n\n    @Post(\"PostFindOne\")\n    @HttpCode(HttpStatus.OK)\n    PostFindOne(@Body() body: SearchBody): Promise<T | null> {\n        return this._services.CURD_SearchOne(body);\n    }\n\n\n    @Get(':id')\n    findOne(@Param('id') id: string, @Query() query?: FindOneQuery) {\n        return this._services.CURD_FindOne(id, query);\n    }\n\n    @Post(\"\")\n    create(@Body() createPostDto: DeepPartial<T>) {\n        return this._services.CURD_Create(createPostDto);\n    }\n\n    @Patch(':id')\n    @Put(':id')\n    update(@Param('id') id: string, @Body() updatePostDto: DeepPartial<T>) {\n        return this._services.CURD_Update(id, updatePostDto);\n    }\n\n    @Delete(':id')\n    remove(@Param('id') id: string) {\n        return this._services.CURD_Remove(id);\n    }\n\n\n}"}}